{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/album-list/album-list.component.ts","webpack:///src/app/components/album-list/album-list.component.html","webpack:///src/app/components/form/form.component.ts","webpack:///src/app/components/form/form.component.html","webpack:///src/app/components/pokemon-form/pokemon-form.component.ts","webpack:///src/app/components/pokemon-form/pokemon-form.component.html","webpack:///src/app/components/pokemon/pokemon.component.ts","webpack:///src/app/components/pokemon/pokemon.component.html","webpack:///src/app/mat/mat.module.ts","webpack:///src/app/pipes/pokemon-abilities.pipe.ts","webpack:///src/app/services/albums.service.ts","webpack:///src/app/services/pokemon-firestore.service.ts","webpack:///src/app/services/pokemon.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","pathMatch","redirectTo","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","provide","useValue","initializeApp","configFirebase","declarations","providers","bootstrap","entryComponents","AlbumListComponent","albumService","dialog","displayedColumns","dataSource","getData","getAllAlbums","subscribe","res","data","openModal","resetForm","element","selected","deleteAlbum","dialogConfig","autoFocus","open","name","band","producer","label","genre","newAlbum","FormComponent","album","dialogRef","fb","visible","selectable","removable","addOnBlur","separatorKeysCodes","hasError","controlName","errorName","form","controls","group","required","minLength","maxLength","array","show","patchValue","forEach","getLabel","push","control","getGenre","getProducer","event","preventDefault","valid","reset","inputLabel","input","valueLabel","value","trim","inputGenre","valueGenre","inputProducer","valueProducer","index","removeAt","getName","getBand","addAlbum","editedAlbum","editAlbum","close","markAsPristine","markAsUntouched","get","onSubmit","addLabel","addGenre","addProducer","onSAveForm","PokemonFormComponent","pokemon","fbp","pokemonForm","image","pattern","height","weight","abilities","selectedPokemon","getAbilities","newPokemon","getImage","getIHeight","getWeight","addPokemon","editedPokemon","editPokemon","onSubmitPokemon","addAbility","PokemonComponent","pokemonService","router","pokemonFirestoreService","paginator","getAllPokemons","resetPokemonForm","deletePokemon","filterValue","target","filter","toLowerCase","firstPage","applyFilter","MatModule","PokemonAbilitiesPipe","map","a","ability","join","AlbumsService","afs","albumCollection","collection","albums","snapshotChanges","pipe","action","payload","doc","console","log","update","add","providedIn","PokemonFirestoreService","afsPokemon","pokemonCollection","pokemons","PokemonService","http","baseUrl","environment","production","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AlbumListComponent } from './components/album-list/album-list.component';\n\nimport { PokemonComponent } from './components/pokemon/pokemon.component';\n\n\nconst routes: Routes = [\n  {path: 'albums', component: AlbumListComponent},\n  {path: 'pokemon', component: PokemonComponent},\n  {path: '', pathMatch: 'full', redirectTo: 'albums'},\n  {path: '**', pathMatch: 'full', redirectTo: 'albums'}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'homework5';\n}\n","<div class=\"nav\">\n    <mat-toolbar color=\"primary\">\n        <mat-toolbar-row>\n            <button (click)=\"sidenav.toggle()\" mat-icon-button>\n                <mat-icon>menu</mat-icon>\n            </button>\n            <span>Homework 5</span>\n        </mat-toolbar-row>\n    </mat-toolbar>\n\n    <mat-sidenav-container>\n        <mat-sidenav #sidenav>\n            <mat-nav-list>\n                <a (click)=\"sidenav.toggle()\" href=\"\" mat-list-item>Close</a>\n                <a (click)=\"sidenav.toggle()\" mat-list-item routerLink=\"/albums\">Albums</a>\n                <a (click)=\"sidenav.toggle()\" mat-list-item routerLink=\"/pokemon\">Pokemons</a>\n\n            </mat-nav-list>\n        </mat-sidenav>\n        <mat-sidenav-content>\n            <router-outlet></router-outlet>\n        </mat-sidenav-content>\n    </mat-sidenav-container>\n</div>\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatModule } from './mat/mat.module';\nimport { AlbumListComponent } from './components/album-list/album-list.component';\nimport { AngularFireModule } from '@angular/fire';\nimport { AlbumsService } from './services/albums.service';\nimport { environment } from '../environments/environment';\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\nimport { FormComponent } from './components/form/form.component';\nimport {HttpClientModule } from '@angular/common/http';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { PokemonComponent } from './components/pokemon/pokemon.component';\nimport { PokemonService } from './services/pokemon.service';\nimport { PokemonAbilitiesPipe } from './pipes/pokemon-abilities.pipe';\nimport { PokemonFormComponent } from './components/pokemon-form/pokemon-form.component';\nimport { PokemonFirestoreService } from './services/pokemon-firestore.service';\n\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        AlbumListComponent,\n        FormComponent,\n        PokemonComponent,\n        PokemonComponent,\n        PokemonAbilitiesPipe,\n        PokemonFormComponent,\n    ],\n    imports        : [\n        BrowserModule,\n        AppRoutingModule,\n        BrowserAnimationsModule,\n        AngularFirestoreModule,\n        AngularFireModule.initializeApp(environment.configFirebase),\n        FormsModule,\n        MatModule,\n        LayoutModule,\n        MatToolbarModule,\n        MatButtonModule,\n        MatSidenavModule,\n        MatIconModule,\n        MatListModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n\n    ],\n    providers      : [AlbumsService, PokemonService, PokemonFirestoreService,\n        {\n            provide : MatDialogRef,\n            useValue: []\n        },\n        {\n            provide : MAT_DIALOG_DATA,\n            useValue: []\n        }],\n    bootstrap      : [AppComponent],\n    entryComponents: [FormComponent, PokemonFormComponent]\n})\nexport class AppModule {\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { AlbumsService } from '../../services/albums.service';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { FormComponent } from '../form/form.component';\n\n@Component({\n    selector   : 'app-album-list',\n    templateUrl: './album-list.component.html',\n    styleUrls  : ['./album-list.component.scss']\n})\nexport class AlbumListComponent implements OnInit {\n    displayedColumns: string[] = ['name', 'band', 'genre', 'label', 'producer', 'actions'];\n    dataSource                 = new MatTableDataSource();\n\n    constructor(\n        private albumService: AlbumsService,\n        private dialog: MatDialog) { }\n\n    ngOnInit(): void {\n        this.getData();\n    }\n\n    // get data from album service\n    getData() {\n        this.albumService.getAllAlbums().subscribe(res => this.dataSource.data = res);\n    }\n\n    // calling modal for create new album\n    newAlbum() {\n        this.openModal();\n        this.resetForm();\n        this.getData();\n    }\n\n    // calling modal for edit album\n    onEdit(element) {\n        this.openModal();\n        if (element) {\n            this.albumService.selected = element;\n        }\n    }\n\n    // delete album by id\n    onDelete(id: string) {\n        return this.albumService.deleteAlbum(id);\n    }\n\n    // modal\n    openModal(): void {\n        const dialogConfig     = new MatDialogConfig();\n        dialogConfig.data      = {\n            title: 'Modal'\n        };\n        dialogConfig.autoFocus = true;\n        this.dialog.open(FormComponent, dialogConfig);\n    }\n\n    resetForm(): void {\n        this.albumService.selected.name     = '';\n        this.albumService.selected.band     = '';\n        this.albumService.selected.producer = [];\n        this.albumService.selected.label    = [];\n        this.albumService.selected.genre    = [];\n        this.albumService.selected.id       = null;\n    }\n}\n","<div class=\"flex\">\n    <h1>Albums</h1>\n    <button (click)=\"newAlbum()\" color=\"accent\" mat-flat-button>\n        New\n        <mat-icon>save</mat-icon>\n    </button>\n</div>\n<table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" mat-table matSort>\n\n    <!-- Position Column -->\n    <ng-container matColumnDef=\"name\">\n        <th *matHeaderCellDef mat-header-cell>Name</th>\n        <td *matCellDef=\"let element\" mat-cell> {{element.name}} </td>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"band\">\n        <th *matHeaderCellDef mat-header-cell> Band</th>\n        <td *matCellDef=\"let element\" mat-cell> {{element.band}} </td>\n    </ng-container>\n\n    <!-- Weight Column -->\n    <ng-container matColumnDef=\"genre\">\n        <th *matHeaderCellDef mat-header-cell> Genre</th>\n        <td *matCellDef=\"let element\" mat-cell> {{element.genre}} </td>\n    </ng-container>\n\n    <!-- Symbol Column -->\n    <ng-container matColumnDef=\"label\">\n        <th *matHeaderCellDef mat-header-cell> Label</th>\n        <td *matCellDef=\"let element\" mat-cell> {{element.label}} </td>\n    </ng-container>\n    <ng-container matColumnDef=\"producer\">\n        <th *matHeaderCellDef mat-header-cell> Producer</th>\n        <td *matCellDef=\"let element\" mat-cell> {{element.producer}} </td>\n    </ng-container>\n\n    <tr *matHeaderRowDef=\"displayedColumns\" mat-header-row></tr>\n    <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n\n    <ng-container matColumnDef=\"actions\">\n        <th *matHeaderCellDef mat-header-cell>Actions</th>\n        <td *matCellDef=\"let element\" mat-cell>\n            <mat-icon (click)=\"onEdit(element)\" color=\"primary\">edit</mat-icon>\n            <mat-icon (click)=\"onDelete(element.id)\" color=\"warn\">delete</mat-icon>\n        </td>\n    </ng-container>\n\n\n</table>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { AlbumsService } from '../../services/albums.service';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector   : 'app-form',\n    templateUrl: './form.component.html',\n    styleUrls  : ['./form.component.scss']\n})\nexport class FormComponent implements OnInit {\n    form: FormGroup;\n    visible                               = true;\n    selectable                            = true;\n    removable                             = true;\n    addOnBlur                             = true;\n    readonly separatorKeysCodes: number[] = [ENTER, COMMA];\n\n    constructor(\n        public album: AlbumsService,\n        private dialogRef: MatDialogRef<FormComponent>,\n        @Inject(MAT_DIALOG_DATA) data,\n        private fb: FormBuilder\n    ) {\n        this.form = this.fb.group({\n            name    : ['', [Validators.required, Validators.minLength(3), Validators.maxLength(30)]],\n            band    : ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20)]],\n            genre   : this.fb.array([], [Validators.required]),\n            label   : this.fb.array([], [Validators.required]),\n            producer: this.fb.array([], [Validators.required])\n        });\n    }\n\n    // get data\n    get getName() {\n        return this.form.get('name');\n    }\n\n    get getBand() {\n        return this.form.get('band');\n    }\n\n    get getLabel(): FormArray {\n\n        return this.form.get('label') as FormArray;\n    }\n\n    get getGenre(): FormArray {\n        return this.form.get('genre') as FormArray;\n    }\n\n    get getProducer(): FormArray {\n        return this.form.get('producer') as FormArray;\n    }\n\n    ngOnInit(): void {\n        this.show();\n    }\n\n    // show values in input\n    show() {\n        this.form.patchValue(this.album.selected);\n        this.album.selected.label.forEach(e => {\n            this.getLabel.push(this.fb.control(e));\n        });\n        this.album.selected.genre.forEach(e => {\n            this.getGenre.push(this.fb.control(e));\n        });\n        this.album.selected.producer.forEach(e => {\n            this.getProducer.push(this.fb.control(e));\n        });\n    }\n\n    onSubmit(event: Event) {\n        event.preventDefault();\n        if (this.form.valid) {\n            this.form.reset();\n        }\n    }\n\n    // add label or quit\n    addLabel(event: MatChipInputEvent): void {\n        const inputLabel = event.input;\n        const valueLabel = event.value;\n\n        // Add our requirement\n        if ((valueLabel || '').trim()) {\n\n            this.getLabel.push(new FormControl(this.fb.control(valueLabel.trim())));\n        }\n\n        // Reset the input value\n        if (inputLabel) {\n            inputLabel.value = '';\n        }\n    }\n\n    // add genre or quit\n    addGenre(event: MatChipInputEvent): void {\n        const inputGenre = event.input;\n        const valueGenre = event.value;\n\n        // Add our requirement\n        if ((valueGenre || '').trim()) {\n\n            this.getGenre.push(this.fb.control(valueGenre.trim()));\n        }\n\n        // Reset the input value\n        if (inputGenre) {\n            inputGenre.value = '';\n        }\n    }\n\n    addProducer(event: MatChipInputEvent): void {\n        const inputProducer = event.input;\n        const valueProducer = event.value;\n\n        // Add our requirement\n        if ((valueProducer || '').trim()) {\n\n            this.getProducer.push(this.fb.control(valueProducer.trim()));\n        }\n\n        // Reset the input value\n        if (inputProducer) {\n            inputProducer.value = '';\n        }\n    }\n\n    // remove by index\n    removeLabel(index: number): void {\n        this.getLabel.removeAt(index);\n    }\n\n    removeGenre(index: number): void {\n        this.getGenre.removeAt(index);\n    }\n\n    removeProducer(index: number): void {\n        this.getProducer.removeAt(index);\n    }\n\n    // check errors\n    public hasError = (controlName: string, errorName: string) => {\n        return this.form.controls[controlName].hasError(errorName);\n    }\n\n    // save form if album not in collection add if it is edit\n    onSAveForm() {\n        if (this.album.selected.id === null) {\n            const newAlbum = {\n                name    : this.getName.value,\n                band    : this.getBand.value,\n                label   : this.getLabel.value,\n                genre   : this.getGenre.value,\n                producer: this.getProducer.value\n            };\n            this.album.addAlbum(newAlbum);\n        } else {\n            const editedAlbum = {\n                id      : this.album.selected.id,\n                name    : this.getName.value,\n                band    : this.getBand.value,\n                label   : this.getLabel.value,\n                genre   : this.getGenre.value,\n                producer: this.getProducer.value\n            };\n            this.album.editAlbum(editedAlbum);\n        }\n        this.close();\n    }\n\n    close(): void {\n        this.form.markAsPristine();\n        this.form.markAsUntouched();\n        this.dialogRef.close();\n    }\n}\n","<div class=\"container\">\n    <form (ngSubmit)=\"onSubmit($event)\" [formGroup]=\"form\" novalidate>\n        <mat-form-field>\n            <input formControlName=\"name\"\n                   id=\"name\"\n                   matInput\n                   placeholder=\"Name\"\n                   type=\"text\">\n            <mat-hint align=\"end\">Not more then 30 characters long</mat-hint>\n            <mat-error *ngIf=\"hasError('name', 'required')\">Name is required</mat-error>\n            <mat-error *ngIf=\"hasError('name', 'maxlength')\">You have more than 30 characters</mat-error>\n            <mat-error *ngIf=\"hasError('name', 'minlength')\">You have les than 3 characters</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n            <input\n                formControlName=\"band\"\n                id=\"band\"\n                matInput\n                placeholder=\"Band\"\n                type=\"text\">\n            <mat-hint align=\"end\">Not more then 30 characters long</mat-hint>\n            <mat-error *ngIf=\"hasError('band', 'required')\">Band is required</mat-error>\n            <mat-error *ngIf=\"hasError('band', 'maxlength')\">You have more than 20 characters</mat-error>\n            <mat-error *ngIf=\"hasError('band', 'minlength')\">You have les than 3 characters</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n            <mat-chip-list #label>\n                <mat-chip (removed)=\"removeLabel(i)\" *ngFor=\"let labels of getLabel.controls; let i = index;\"\n                          [removable]=\"removable\" [selectable]=\"selectable\">\n                    {{labels.value}}\n                    <mat-icon *ngIf=\"removable\" matChipRemove>cancel</mat-icon>\n                </mat-chip>\n                <input (matChipInputTokenEnd)=\"addLabel($event)\"\n                       [matChipInputAddOnBlur]=\"addOnBlur\"\n                       [matChipInputFor]=\"label\"\n                       [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n                       placeholder=\"New Label\"/>\n                <mat-error *ngIf=\"hasError('label', 'required')\">At least one is required</mat-error>\n\n            </mat-chip-list>\n        </mat-form-field>\n        <mat-form-field>\n            <mat-chip-list #genre>\n                <mat-chip (removed)=\"removeGenre(i)\" *ngFor=\"let genre of getGenre.controls; let i = index;\"\n                          [removable]=\"removable\" [selectable]=\"selectable\">\n                    {{genre.value}}\n                    <mat-icon *ngIf=\"removable\" matChipRemove>cancel</mat-icon>\n                </mat-chip>\n                <input (matChipInputTokenEnd)=\"addGenre($event)\"\n                       [matChipInputAddOnBlur]=\"addOnBlur\"\n                       [matChipInputFor]=\"genre\"\n                       [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n                       placeholder=\"New Genre\"\n                />\n                <mat-error *ngIf=\"hasError('genre', 'required')\">At least one is required</mat-error>\n            </mat-chip-list>\n        </mat-form-field>\n        <mat-form-field>\n            <mat-chip-list #producer>\n                <mat-chip (removed)=\"removeProducer(i)\" *ngFor=\"let producer of getProducer.controls; let i = index;\"\n                          [removable]=\"removable\" [selectable]=\"selectable\">\n                    {{producer.value}}\n                    <mat-icon *ngIf=\"removable\" matChipRemove>cancel</mat-icon>\n                </mat-chip>\n                <input (matChipInputTokenEnd)=\"addProducer($event)\"\n                       [matChipInputAddOnBlur]=\"addOnBlur\"\n                       [matChipInputFor]=\"producer\"\n                       [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n                       placeholder=\"New Producer\"/>\n                <mat-error *ngIf=\"hasError('producer', 'required')\">At least one is required</mat-error>\n            </mat-chip-list>\n        </mat-form-field>\n        <button (click)=\"close()\"\n                color=\"warn\"\n                mat-button\n                type=\"button\">\n            CancelL\n        </button>\n        <button (click)=\"onSAveForm();\n                onSubmit($event)\"\n                [disabled]=\"form.invalid\"\n                color=\"primary\"\n                mat-button>\n            Save\n        </button>\n\n    </form>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { PokemonFirestoreService } from '../../services/pokemon-firestore.service';\n\n@Component({\n    selector   : 'app-pokemon-form',\n    templateUrl: './pokemon-form.component.html',\n    styleUrls  : ['./pokemon-form.component.scss']\n})\nexport class PokemonFormComponent implements OnInit {\n\n    pokemonForm: FormGroup;\n    visible                               = true;\n    selectable                            = true;\n    removable                             = true;\n    addOnBlur                             = true;\n    readonly separatorKeysCodes: number[] = [ENTER, COMMA];\n\n    constructor(\n        public pokemon: PokemonFirestoreService,\n        private dialogRef: MatDialogRef<PokemonFormComponent>,\n        @Inject(MAT_DIALOG_DATA) data,\n        private fbp: FormBuilder\n    ) {\n        this.pokemonForm = this.fbp.group({\n            name     : ['', [Validators.required, Validators.minLength(3), Validators.maxLength(12)]],\n            image    : ['', [Validators.required, Validators.pattern(\n                '^https?://(?:[a-z0-9\\\\-]+\\\\.)+[a-z]{2,6}(?:/[^/#?]+)+\\\\.(?:jpg|gif|png)$')]],\n            height   : ['', [Validators.required, Validators.pattern('^[0-9]+$')]],\n            weight   : ['', [Validators.required, Validators.pattern('^[0-9]+$')]],\n            abilities: this.fbp.array([], [Validators.required])\n\n        });\n    }\n\n    // Get data\n    get getName() {\n        return this.pokemonForm.get('name');\n    }\n\n    get getImage() {\n        return this.pokemonForm.get('image');\n    }\n\n    get getWeight() {\n        return this.pokemonForm.get('weight');\n    }\n\n    get getIHeight() {\n        return this.pokemonForm.get('height');\n    }\n\n    get getAbilities(): FormArray {\n        return this.pokemonForm.get('abilities') as FormArray;\n    }\n\n    ngOnInit(): void {\n        this.show();\n    }\n\n    // show data in inputs\n    show() {\n        this.pokemonForm.patchValue(this.pokemon.selectedPokemon);\n        this.pokemon.selectedPokemon.abilities.forEach(e => {\n            this.getAbilities.push(this.fbp.control(e));\n        });\n\n    }\n\n    onSubmitPokemon(event: Event) {\n        event.preventDefault();\n        if (this.pokemonForm.valid) {\n            this.pokemonForm.reset();\n        }\n    }\n\n    // check errors\n    public hasError = (controlName: string, errorName: string) => {\n        return this.pokemonForm.controls[controlName].hasError(errorName);\n    };\n\n    // add ability or clear\n    addAbility(event: MatChipInputEvent): void {\n        const input = event.input;\n        const value = event.value;\n        if ((value || '').trim()) {\n\n            this.getAbilities.push(this.fbp.control(value.trim()));\n        }\n\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    // remove ability at index\n    removeAbility(index: number): void {\n\n        if (index >= 0) {\n            this.getAbilities.removeAt(index);\n\n        }\n    }\n\n    // set values\n    onSAveForm() {\n        if (this.pokemon.selectedPokemon.id == null) {\n            const newPokemon = {\n                name     : this.getName.value,\n                image    : this.getImage.value,\n                height   : this.getIHeight.value,\n                abilities: this.getAbilities.value,\n                weight   : this.getWeight.value\n            };\n            this.pokemon.addPokemon(newPokemon);\n        } else {\n            const editedPokemon = {\n                id       : this.pokemon.selectedPokemon.id,\n                name     : this.getName.value,\n                image    : this.getImage.value,\n                abilities: this.getAbilities.value,\n                height   : this.getIHeight.value,\n                weight   : this.getWeight.value\n            };\n            this.pokemon.editPokemon(editedPokemon);\n\n        }\n        this.close();\n    }\n\n    close(): void {\n        this.pokemonForm.markAsPristine();\n        this.pokemonForm.markAsUntouched();\n        this.dialogRef.close();\n    }\n\n}\n","<div class=\"container\">\n    <form (ngSubmit)=\"onSubmitPokemon($event)\" [formGroup]=\"pokemonForm\" novalidate>\n        <mat-form-field>\n            <input formControlName=\"name\"\n                   id=\"name\"\n                   matInput\n                   placeholder=\"Name\"\n                   type=\"text\">\n            <mat-hint align=\"end\">Not more then 12 characters long</mat-hint>\n            <mat-error *ngIf=\"hasError('name', 'required')\">Name is required</mat-error>\n            <mat-error *ngIf=\"hasError('name', 'maxlength')\">You have more than 12 characters</mat-error>\n            <mat-error *ngIf=\"hasError('name', 'minlength')\">You have les than 3 characters</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n            <input formControlName=\"height\"\n                   id=\"height\"\n                   matInput\n                   placeholder=\"Height\"\n                   type=\"text\">\n            <mat-hint align=\"end\">Please enter a number</mat-hint>\n            <mat-error *ngIf=\"hasError('height', 'required')\">Height is required</mat-error>\n            <mat-error *ngIf=\"hasError('height', 'pattern')\">Height is a number</mat-error>\n\n        </mat-form-field>\n        <mat-form-field>\n            <input formControlName=\"weight\" id=\"weight\" matInput placeholder=\"Weight\" type=\"text\">\n            <mat-hint align=\"end\">Please enter a number</mat-hint>\n            <mat-error *ngIf=\"hasError('weight', 'required')\">Weight is required</mat-error>\n            <mat-error *ngIf=\"hasError('weight', 'pattern')\">Weight is a number</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n            <input formControlName=\"image\" id=\"image\" matInput placeholder=\"Link to img\" type=\"text\">\n            <mat-hint align=\"end\">Please enter a valid link</mat-hint>\n            <mat-error *ngIf=\"hasError('image', 'required')\">Link is required</mat-error>\n            <mat-error *ngIf=\"hasError('image', 'pattern')\">This link is invalid</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n            <mat-chip-list #ability>\n                <mat-chip (removed)=\"removeAbility(i)\" *ngFor=\"let ability of getAbilities.controls ; let i = index;\"\n                          [removable]=\"removable\" [selectable]=\"selectable\">\n                    {{ability.value }}\n                    <mat-icon *ngIf=\"removable\" matChipRemove>cancel</mat-icon>\n                </mat-chip>\n                <input (matChipInputTokenEnd)=\"addAbility($event)\"\n                       [matChipInputAddOnBlur]=\"addOnBlur\"\n                       [matChipInputFor]=\"ability\"\n                       [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n                       placeholder=\"New Ability\"/>\n                <mat-error *ngIf=\"hasError('abilities', 'required')\">At least one is required</mat-error>\n            </mat-chip-list>\n        </mat-form-field>\n\n        <button (click)=\"close()\"\n                color=\"warn\"\n                mat-button\n                type=\"button\">\n            Cancel\n        </button>\n        <button (click)=\"onSAveForm();\n                onSubmitPokemon($event) \"\n                [disabled]=\"pokemonForm.invalid\"\n                color=\"primary\"\n                mat-button\n                type=\"submit\">\n            Save\n        </button>\n\n    </form>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { PokemonService } from 'src/app/services/pokemon.service';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Router } from '@angular/router';\nimport { PokemonFirestoreService } from '../../services/pokemon-firestore.service';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { PokemonFormComponent } from '../pokemon-form/pokemon-form.component';\n\n@Component({\n    selector   : 'app-pokemon',\n    templateUrl: './pokemon.component.html',\n    styleUrls  : ['./pokemon.component.scss']\n})\nexport class PokemonComponent implements OnInit {\n    // Showing columns\n    displayedColumns: string[] = ['name', 'image', 'abilities', 'weight', 'height', 'actions'];\n    dataSource                 = new MatTableDataSource();\n    // data: any[] = [];\n\n    @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\n\n    constructor(private pokemonService: PokemonService, private router: Router,\n                private pokemonFirestoreService: PokemonFirestoreService,\n                public pokemon: PokemonFirestoreService,\n                private dialog: MatDialog) { }\n\n    ngOnInit(): void {\n        this.getData();\n        this.dataSource.paginator = this.paginator;\n        // !!!!!!!!   1 time used to get pokemons and push it to firebase\n        // this.getPokemons()\n\n    }\n\n    // !!!!!!!!   1 time used to get pokemons and push it to firebase\n    // getPokemons() {\n    //     for (let i = 1; i <= 50; i++) {\n    //         this.pokemonService.getPokemons(i).subscribe(\n    //             res => {\n    //                 this.pokemon.addPokemon({\n    //                     image    : res.sprites.front_default,\n    //                     name     : res.name,\n    //                     abilities: res.abilities.map(a => a.ability.name),\n    //                     weight   : res.weight,\n    //                     height   : res.height\n    //                 });\n    //             },\n    //             err => {\n    //                 console.log(err);\n    //             }\n    //         );\n    //     }\n    // }\n    // Get data from firestore\n    getData() {\n        this.pokemonFirestoreService.getAllPokemons()\n            .subscribe(res => {\n                this.dataSource.data = res;\n            });\n    }\n\n    // Open modal and delete all data to get clear inputs\n    newPokemon() {\n        this.openModal();\n        this.resetPokemonForm();\n        this.getData();\n\n    }\n\n    // Opening modal and put there selected pokemon\n    onEdit(element) {\n        this.openModal();\n        if (element) {\n            this.pokemonFirestoreService.selectedPokemon = element;\n\n        }\n\n    }\n\n    // Deleting pokemon by id\n    onDelete(id: string) {\n        return this.pokemonFirestoreService.deletePokemon(id);\n    }\n\n    // Open modal\n    openModal(): void {\n        const dialogConfig     = new MatDialogConfig();\n        dialogConfig.data      = {\n            title: 'Modal'\n        };\n        dialogConfig.autoFocus = true;\n        this.dialog.open(PokemonFormComponent, dialogConfig);\n    }\n\n    // Reset form\n    resetPokemonForm(): void {\n        this.pokemonFirestoreService.selectedPokemon.name      = '';\n        this.pokemonFirestoreService.selectedPokemon.height    = null;\n        this.pokemonFirestoreService.selectedPokemon.weight    = null;\n        this.pokemonFirestoreService.selectedPokemon.image     = '';\n        this.pokemonFirestoreService.selectedPokemon.abilities = [];\n        this.pokemonFirestoreService.selectedPokemon.id        = null;\n    }\n\n    // Filter for pagination\n    applyFilter(event: Event) {\n        const filterValue      = (event.target as HTMLInputElement).value;\n        this.dataSource.filter = filterValue.trim().toLowerCase();\n\n        if (this.dataSource.paginator) {\n            this.dataSource.paginator.firstPage();\n        }\n    }\n\n}\n","<div class=\"container\">\n    <div class=\"filter\">\n        <mat-form-field>\n            <mat-label>Filter</mat-label>\n            <input #input (keyup)=\"applyFilter($event)\" matInput>\n        </mat-form-field>\n    </div>\n    <table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" mat-table>\n        <ng-container matColumnDef=\"new\">\n            <th *matHeaderCellDef mat-header-cell>name</th>\n\n        </ng-container>\n        <ng-container matColumnDef=\"name\">\n            <th *matHeaderCellDef mat-header-cell>name</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.name}} </td>\n        </ng-container>\n        <ng-container matColumnDef=\"image\">\n            <th *matHeaderCellDef mat-header-cell> Image</th>\n            <td *matCellDef=\"let element\" mat-cell>\n                <img alt=\"pokemon\" height=\"100\" src=\"{{element.image}}\" width=\"100\">\n            </td>\n        </ng-container>\n        <ng-container matColumnDef=\"abilities\">\n            <th *matHeaderCellDef mat-header-cell >abilities</th>\n            <td *matCellDef=\"let element\" mat-cell>\n                {{element.abilities }}\n            </td>\n        </ng-container>\n        <ng-container matColumnDef=\"weight\">\n            <th *matHeaderCellDef mat-header-cell>weight</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.weight}} </td>\n        </ng-container>\n        <ng-container matColumnDef=\"height\">\n            <th *matHeaderCellDef mat-header-cell>height</th>\n            <td *matCellDef=\"let element\" mat-cell> {{element.height}} </td>\n        </ng-container>\n        <tr *matHeaderRowDef=\"displayedColumns\" mat-header-row></tr>\n        <tr *matRowDef=\"let row; columns: displayedColumns;\" mat-row></tr>\n\n        <ng-container matColumnDef=\"actions\">\n            <th *matHeaderCellDef mat-header-cell>Actions</th>\n            <td *matCellDef=\"let element\" mat-cell>\n                <mat-icon (click)=\"onEdit(element)\" color=\"primary\">edit</mat-icon>\n                <mat-icon (click)=\"onDelete(element.id)\" color=\"accent\">delete</mat-icon>\n                <mat-icon (click)=\"newPokemon()\" color=\"accent\">add_box</mat-icon>\n            </td>\n        </ng-container>\n        <tr *matNoDataRow class=\"mat-row\">\n            <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{input.value}}\"</td>\n        </tr>\n    </table>\n    <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ClipboardModule,\n        MatAutocompleteModule,\n        MatBadgeModule,\n        MatBottomSheetModule,\n        MatButtonModule,\n        MatButtonToggleModule,\n        MatCardModule,\n        MatCheckboxModule,\n        MatChipsModule,\n        MatStepperModule,\n        MatDatepickerModule,\n        MatDialogModule,\n        MatDividerModule,\n        MatExpansionModule,\n        MatGridListModule,\n        MatIconModule,\n        MatInputModule,\n        MatListModule,\n        MatMenuModule,\n        MatNativeDateModule,\n        MatPaginatorModule,\n        MatProgressBarModule,\n        MatProgressSpinnerModule,\n        MatRadioModule,\n        MatRippleModule,\n        MatSelectModule,\n        MatSidenavModule,\n        MatSliderModule,\n        MatSlideToggleModule,\n        MatSnackBarModule,\n        MatSortModule,\n        MatTableModule,\n        MatTabsModule,\n        MatToolbarModule,\n        MatTooltipModule,\n        MatTreeModule,\n        OverlayModule,\n        PortalModule,\n    ],\n\n    exports: [\n        CommonModule,\n        ClipboardModule,\n        MatAutocompleteModule,\n        MatBadgeModule,\n        MatBottomSheetModule,\n        MatButtonModule,\n        MatButtonToggleModule,\n        MatCardModule,\n        MatCheckboxModule,\n        MatChipsModule,\n        MatStepperModule,\n        MatDatepickerModule,\n        MatDialogModule,\n        MatDividerModule,\n        MatExpansionModule,\n        MatGridListModule,\n        MatIconModule,\n        MatInputModule,\n        MatListModule,\n        MatMenuModule,\n        MatNativeDateModule,\n        MatPaginatorModule,\n        MatProgressBarModule,\n        MatProgressSpinnerModule,\n        MatRadioModule,\n        MatRippleModule,\n        MatSelectModule,\n        MatSidenavModule,\n        MatSliderModule,\n        MatSlideToggleModule,\n        MatSnackBarModule,\n        MatSortModule,\n        MatTableModule,\n        MatTabsModule,\n        MatToolbarModule,\n        MatTooltipModule,\n        MatTreeModule,\n        OverlayModule,\n        PortalModule\n    ]\n})\n\nexport class MatModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'pokemonAbilities'\n})\nexport class PokemonAbilitiesPipe implements PipeTransform {\n\n  transform(abilities: any[]): string {\n    return (abilities || []).map(a => a.ability.name).join(', ');\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AlbumI } from '../models/album.interface';\n\nexport interface AlbumId extends AlbumI {\n    id: string;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AlbumsService {\n    albums: Observable<AlbumId[]>;\n    public selected = {\n        id      : null,\n        name    : '',\n        band    : '',\n        genre   : [],\n        label   : [],\n        producer: []\n    };\n    private albumCollection: AngularFirestoreCollection<AlbumI>;\n\n    constructor(private readonly afs: AngularFirestore) {\n        this.albumCollection = afs.collection<AlbumI>('albums');\n        this.albums          = this.albumCollection.snapshotChanges().pipe(\n            map(action => action.map(a => {\n                const data = a.payload.doc.data() as AlbumI;\n                const id   = a.payload.doc.id;\n                return {id, ...data};\n            }))\n        );\n    }\n\n    getAllAlbums() {\n        return this.albums;\n    }\n\n    editAlbum(album: AlbumId) {\n        console.log(album);\n\n        return this.albumCollection.doc(album.id).update(album);\n    }\n\n    deleteAlbum(id: string) {\n        return this.albumCollection.doc(id).delete();\n    }\n\n    addAlbum(album: { name: string; band: string; label: any[]; genre: any[]; producer: any[]; }) {\n\n        return this.albumCollection.add(album);\n\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/firestore';\nimport { map } from 'rxjs/operators';\nimport { PokemonI } from '../models/pokemon.interface';\n\nexport interface PokemonId extends PokemonI {\n    id: string;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PokemonFirestoreService {\n    pokemons: Observable<PokemonId[]>;\n    public selectedPokemon = {\n        id       : null,\n        height   : null,\n        weight   : null,\n        image    : '',\n        name     : '',\n        abilities: []\n    };\n    private pokemonCollection: AngularFirestoreCollection<PokemonI>;\n\n    // get pokemons from firestore\n    constructor(private readonly afsPokemon: AngularFirestore) {\n        this.pokemonCollection = afsPokemon.collection<PokemonI>('pokemons');\n        this.pokemons          = this.pokemonCollection.snapshotChanges().pipe(\n            map(action => action.map(a => {\n                const data = a.payload.doc.data() as PokemonI;\n                const id   = a.payload.doc.id;\n                return {id, ...data};\n\n            }))\n        );\n    }\n\n    getAllPokemons() {\n        return this.pokemons;\n    }\n\n    // edit pokemon by id and update it in firebase\n    editPokemon(pokemon: PokemonId) {\n        return this.pokemonCollection.doc(pokemon.id).update(pokemon);\n    }\n\n    // delete pokemon by id\n    deletePokemon(id: string) {\n        return this.pokemonCollection.doc(id).delete();\n    }\n\n    // add pokemon to firestore\n    addPokemon(pokemon: { abilities: []; image: string; name: string; weight: number; height: number; }) {\n        return this.pokemonCollection.add(pokemon);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PokemonService {\n\n    baseUrl: string = environment.baseUrl;\n\n    constructor(private http: HttpClient) { }\n\n    // get pokemons\n    getPokemons(index) {\n        return this.http.get<any>(`${this.baseUrl}/pokemon/${index}`);\n    }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production    : false,\n    configFirebase: {\n        apiKey           : 'AIzaSyDJiClaLsdwGOPkrMDLD55c_YavoGHHRUw',\n        authDomain       : 'homework-5-e962d.firebaseapp.com',\n        databaseURL      : 'https://homework-5-e962d.firebaseio.com',\n        projectId        : 'homework-5-e962d',\n        storageBucket    : 'homework-5-e962d.appspot.com',\n        messagingSenderId: '127909762244',\n        appId            : '1:127909762244:web:e6a8753acdfef4c30d6591',\n        measurementId    : 'G-F53ECEZ25T'\n    },\n    baseUrl       : 'https://pokeapi.co/api/v2'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}